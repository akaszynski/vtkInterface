variables:
  ALLOW_PLOTTING: true

jobs:
- job: DocTest
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.7'

  - script: |
      pip install -e .
      # which python
      # python -c "import vtk; print(vtk.VTK_VERSION)"
      # pip list
      # python -c "import pyvista; print(pyvista.Report())"
    displayName: 'Install pyvista'

  - script: |
      pip install codespell pydocstyle
      make doctest
   displayName: 'Run doctest'


- job: Linux
  pool:
    vmImage: 'ubuntu-latest'
  strategy:
    matrix:
      Python35:
        python.version: '3.5'
      Python36:
        python.version: '3.6'
      Python37:
        python.version: '3.7'

  steps:
  - template: .ci/checkout.yml
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
    displayName: 'Use Python $(python.version)'

  - script: |
      pip install -r requirements_test.txt
      pip install -r requirements_docs.txt
      pip install cookiecutter
      pip install -e .
      which python
      python -c "import vtk; print(vtk.VTK_VERSION)"
      pip list
      python -c "import pyvista; print(pyvista.Report())"
    displayName: 'Install dependencies'

  - script: |
      .ci/setup_headless_display.sh
      export DISPLAY=:99.0
      export PYVISTA_OFF_SCREEN=True
      python .ci/pyvista_test.py
    displayName: Install and test headless display

  - script: |
      pip install pytest-azurepipelines
      pytest -v --cov pyvista
    displayName: 'Test Core API'

  - script: |
      pip install pytest pytest-azurepipelines
      pytest -v --doctest-modules pyvista
    displayName: 'Test Package Docstrings'

- job: Windows
  pool:
    vmIMage: 'VS2017-Win2016'
  variables:
    AZURE_CI_WINDOWS: 'true'
  strategy:
    maxParallel: 4
    matrix:
      Python37-64bit:
        PYTHON_VERSION: '3.7'
        PYTHON_ARCH: 'x64'
      Python36-64bit:
        PYTHON_VERSION: '3.6'
        PYTHON_ARCH: 'x64'
      Python35-64bit:
        PYTHON_VERSION: '3.5'
        PYTHON_ARCH: 'x64'
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: $(PYTHON_VERSION)
      architecture: $(PYTHON_ARCH)
      addToPath: true
  - powershell: |
      Set-StrictMode -Version Latest
      $ErrorActionPreference = "Stop"
      $PSDefaultParameterValues['*:ErrorAction']='Stop'
      git clone --depth 1 git://github.com/pyvista/gl-ci-helpers.git
      powershell gl-ci-helpers/appveyor/install_opengl.ps1
    displayName: 'Install OpenGL'
  - powershell: |
      Set-StrictMode -Version Latest
      $ErrorActionPreference = "Stop"
      $PSDefaultParameterValues['*:ErrorAction']='Stop'
      pip install -r requirements.txt
    displayName: 'Install dependencies with pip'
  - script: |
      python setup.py sdist
      python setup.py install
      python -c "import pyvista; print(pyvista.Report())"
    displayName: 'Install PyVista'
  - script: |
      del /Q tests\\test_qt_plotting.py
      python -m pytest --cov -v .
    displayName: 'Run Tests'
